var TypeId;
var TypeOperation;
const SYM_TYPE_ID = Symbol("type_id");
const SYM_KEY_SCHEMA = Symbol("key_schema");
const SYM_VALUE_SCHEMA = Symbol("value_schema");
const SYM_TYPE_OP = Symbol("typeop");
const SYM_ARRAY = Symbol("array");
const SYM_EXACT_VALUE = Symbol("exact_value");
const t = {
    string: {
        [SYM_TYPE_ID]: 0
    },
    number: {
        [SYM_TYPE_ID]: 1
    },
    boolean: {
        [SYM_TYPE_ID]: 2
    },
    bigint: {
        [SYM_TYPE_ID]: 3
    },
    unknown: {
        [SYM_TYPE_ID]: 4
    },
    get undefined () {
        return t.exact(undefined);
    },
    get null () {
        return t.exact(null);
    },
    object (properties) {
        return {
            ...properties,
            [SYM_TYPE_ID]: 5
        };
    },
    record (keys, values) {
        return {
            [SYM_TYPE_ID]: 5,
            [SYM_KEY_SCHEMA]: keys,
            [SYM_VALUE_SCHEMA]: values
        };
    },
    exact (value) {
        return {
            [SYM_TYPE_ID]: 6,
            [SYM_EXACT_VALUE]: value
        };
    },
    optional (schema) {
        return t.union(schema, t.undefined);
    },
    nullable (schema) {
        return t.union(schema, t.null);
    },
    array (schema) {
        return {
            ...schema,
            [SYM_ARRAY]: true
        };
    },
    union (...items) {
        const union = [
            ...items
        ];
        union[SYM_TYPE_OP] = 0;
        return union;
    },
    intersection (...items) {
        const union = [
            ...items
        ];
        union[SYM_TYPE_OP] = 1;
        return union;
    }
};
const mySchema = t.object({
    value: t.union(t.string, t.number, t.boolean),
    record: t.record(t.string, t.unknown)
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBlbnVtIFR5cGVJZCB7XG5cdFNUUklORyxcblx0TlVNQkVSLFxuXHRCT09MRUFOLFxuXHRCSUdJTlQsXG5cdFVOS05PV04sXG5cdE9CSkVDVCxcblx0RVhBQ1RfVkFMVUUsXG59XG5cbmNvbnN0IGVudW0gVHlwZU9wZXJhdGlvbiB7XG5cdFVOSU9OLFxuXHRJTlRFUlNFQ1RJT04sXG59XG5cbmNvbnN0IFNZTV9UWVBFX0lEID0gU3ltYm9sKFwidHlwZV9pZFwiKTtcbmNvbnN0IFNZTV9LRVlfU0NIRU1BID0gU3ltYm9sKFwia2V5X3NjaGVtYVwiKTtcbmNvbnN0IFNZTV9WQUxVRV9TQ0hFTUEgPSBTeW1ib2woXCJ2YWx1ZV9zY2hlbWFcIik7XG5jb25zdCBTWU1fVFlQRV9PUCA9IFN5bWJvbChcInR5cGVvcFwiKTtcbmNvbnN0IFNZTV9BUlJBWSA9IFN5bWJvbChcImFycmF5XCIpO1xuY29uc3QgU1lNX0VYQUNUX1ZBTFVFID0gU3ltYm9sKFwiZXhhY3RfdmFsdWVcIik7XG5cbmRlY2xhcmUgY29uc3QgU1lNX1ZJUlRVQUxfVFlQRV9NQVJLRVI6IHVuaXF1ZSBzeW1ib2w7XG5cbnR5cGUgU2NoZW1hPFQ+ID0gU2NoZW1hQ29udGVudCAmIHsgW1NZTV9WSVJUVUFMX1RZUEVfTUFSS0VSXTogVCB9O1xuXG50eXBlIFNjaGVtYVR5cGU8UyBleHRlbmRzIFNjaGVtYTx1bmtub3duPj4gPSBTW3R5cGVvZiBTWU1fVklSVFVBTF9UWVBFX01BUktFUl07XG5cbnR5cGUgU2NhbGFyU2NoZW1hQ29udGVudCA9IHtcblx0W1NZTV9UWVBFX0lEXTogVHlwZUlkO1xuXHRbU1lNX0VYQUNUX1ZBTFVFXTogdW5rbm93bjtcblx0W1NZTV9BUlJBWV0/OiBib29sZWFuO1xuXHRbU1lNX0tFWV9TQ0hFTUFdPzogU2NoZW1hPHN0cmluZyB8IG51bWJlcj47XG5cdFtTWU1fVkFMVUVfU0NIRU1BXT86IFNjaGVtYTx1bmtub3duPjtcblx0W3Byb3BlcnR5OiBzdHJpbmddOiBTY2hlbWE8dW5rbm93bj47XG59O1xuXG50eXBlIE9wZXJhdGlvblNjaGVtYUNvbnRlbnQgPSBTY2hlbWE8dW5rbm93bj5bXSAmIHtcblx0W1NZTV9UWVBFX09QXTogVHlwZU9wZXJhdGlvbjtcbn07XG5cbnR5cGUgU2NoZW1hQ29udGVudCA9IFNjYWxhclNjaGVtYUNvbnRlbnQgfCBPcGVyYXRpb25TY2hlbWFDb250ZW50O1xuXG50eXBlIFVuaW9uRnJvbUFycmF5U2NoZW1hPEEgZXh0ZW5kcyBTY2hlbWE8dW5rbm93bj5bXT4gPSBBIGV4dGVuZHMgW1xuXHRpbmZlciBIIGV4dGVuZHMgU2NoZW1hPHVua25vd24+LFxuXHQuLi5pbmZlciBUIGV4dGVuZHMgU2NoZW1hPHVua25vd24+W10sXG5dXG5cdD8gU2NoZW1hVHlwZTxIPiB8IFVuaW9uRnJvbUFycmF5U2NoZW1hPFQ+XG5cdDogbmV2ZXI7XG5cbnR5cGUgSW50ZXJzZWN0aW9uRnJvbUFycmF5U2NoZW1hPEEgZXh0ZW5kcyBTY2hlbWE8dW5rbm93bj5bXT4gPSBBIGV4dGVuZHMgW1xuXHRpbmZlciBIIGV4dGVuZHMgU2NoZW1hPHVua25vd24+LFxuXHQuLi5pbmZlciBUIGV4dGVuZHMgU2NoZW1hPHVua25vd24+W10sXG5dXG5cdD8gU2NoZW1hVHlwZTxIPiAmIFVuaW9uRnJvbUFycmF5U2NoZW1hPFQ+XG5cdDogdW5rbm93bjtcblxuY29uc3QgdCA9IHtcblx0c3RyaW5nOiB7IFtTWU1fVFlQRV9JRF06IFR5cGVJZC5TVFJJTkcgfSBhcyBTY2hlbWE8c3RyaW5nPixcblx0bnVtYmVyOiB7IFtTWU1fVFlQRV9JRF06IFR5cGVJZC5OVU1CRVIgfSBhcyBTY2hlbWE8bnVtYmVyPixcblx0Ym9vbGVhbjogeyBbU1lNX1RZUEVfSURdOiBUeXBlSWQuQk9PTEVBTiB9IGFzIFNjaGVtYTxib29sZWFuPixcblx0YmlnaW50OiB7IFtTWU1fVFlQRV9JRF06IFR5cGVJZC5CSUdJTlQgfSBhcyBTY2hlbWE8YmlnaW50Pixcblx0dW5rbm93bjogeyBbU1lNX1RZUEVfSURdOiBUeXBlSWQuVU5LTk9XTiB9IGFzIFNjaGVtYTx1bmtub3duPixcblxuXHRnZXQgdW5kZWZpbmVkKCkge1xuXHRcdHJldHVybiB0LmV4YWN0KHVuZGVmaW5lZCk7XG5cdH0sXG5cblx0Z2V0IG51bGwoKSB7XG5cdFx0cmV0dXJuIHQuZXhhY3QobnVsbCk7XG5cdH0sXG5cblx0b2JqZWN0PFIgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nIHwgbnVtYmVyLCBTY2hlbWE8dW5rbm93bj4+Pihcblx0XHRwcm9wZXJ0aWVzOiBSLFxuXHQpOiBTY2hlbWE8eyBbSyBpbiBrZXlvZiBSXTogU2NoZW1hVHlwZTxSW0tdPiB9PiB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdC4uLnByb3BlcnRpZXMsXG5cdFx0XHRbU1lNX1RZUEVfSURdOiBUeXBlSWQuT0JKRUNULFxuXHRcdH0gYXMgdW5rbm93biBhcyBTY2hlbWE8YW55Pjtcblx0fSxcblxuXHRyZWNvcmQ8SyBleHRlbmRzIHN0cmluZyB8IG51bWJlciwgVj4oXG5cdFx0a2V5czogU2NoZW1hPEs+LFxuXHRcdHZhbHVlczogU2NoZW1hPFY+LFxuXHQpOiBTY2hlbWE8UmVjb3JkPEssIFY+PiB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdFtTWU1fVFlQRV9JRF06IFR5cGVJZC5PQkpFQ1QsXG5cdFx0XHRbU1lNX0tFWV9TQ0hFTUFdOiBrZXlzLFxuXHRcdFx0W1NZTV9WQUxVRV9TQ0hFTUFdOiB2YWx1ZXMsXG5cdFx0fSBhcyB1bmtub3duIGFzIFNjaGVtYTxSZWNvcmQ8SywgVj4+O1xuXHR9LFxuXG5cdGV4YWN0PFQ+KHZhbHVlOiBUKTogU2NoZW1hPFQ+IHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0W1NZTV9UWVBFX0lEXTogVHlwZUlkLkVYQUNUX1ZBTFVFLFxuXHRcdFx0W1NZTV9FWEFDVF9WQUxVRV06IHZhbHVlLFxuXHRcdH0gYXMgU2NoZW1hPFQ+O1xuXHR9LFxuXG5cdG9wdGlvbmFsPFQ+KHNjaGVtYTogU2NoZW1hPFQ+KTogU2NoZW1hPFQgfCB1bmRlZmluZWQ+IHtcblx0XHRyZXR1cm4gdC51bmlvbihzY2hlbWEsIHQudW5kZWZpbmVkKTtcblx0fSxcblxuXHRudWxsYWJsZTxUPihzY2hlbWE6IFNjaGVtYTxUPik6IFNjaGVtYTxUIHwgbnVsbD4ge1xuXHRcdHJldHVybiB0LnVuaW9uKHNjaGVtYSwgdC5udWxsKTtcblx0fSxcblxuXHRhcnJheTxUPihzY2hlbWE6IFNjaGVtYTxUPik6IFNjaGVtYTxUW10+IHtcblx0XHRyZXR1cm4geyAuLi5zY2hlbWEsIFtTWU1fQVJSQVldOiB0cnVlIH0gYXMgU2NoZW1hPFRbXT47XG5cdH0sXG5cblx0dW5pb248QSBleHRlbmRzIFNjaGVtYTx1bmtub3duPltdPihcblx0XHQuLi5pdGVtczogQVxuXHQpOiBTY2hlbWE8VW5pb25Gcm9tQXJyYXlTY2hlbWE8QT4+IHtcblx0XHRjb25zdCB1bmlvbjogT3BlcmF0aW9uU2NoZW1hQ29udGVudCA9IFtcblx0XHRcdC4uLml0ZW1zLFxuXHRcdF0gYXMgT3BlcmF0aW9uU2NoZW1hQ29udGVudDtcblx0XHR1bmlvbltTWU1fVFlQRV9PUF0gPSBUeXBlT3BlcmF0aW9uLlVOSU9OO1xuXHRcdHJldHVybiB1bmlvbiBhcyBTY2hlbWE8YW55Pjtcblx0fSxcblxuXHRpbnRlcnNlY3Rpb248QSBleHRlbmRzIFNjaGVtYTx1bmtub3duPltdPihcblx0XHQuLi5pdGVtczogQVxuXHQpOiBTY2hlbWE8SW50ZXJzZWN0aW9uRnJvbUFycmF5U2NoZW1hPEE+PiB7XG5cdFx0Y29uc3QgdW5pb246IE9wZXJhdGlvblNjaGVtYUNvbnRlbnQgPSBbXG5cdFx0XHQuLi5pdGVtcyxcblx0XHRdIGFzIE9wZXJhdGlvblNjaGVtYUNvbnRlbnQ7XG5cdFx0dW5pb25bU1lNX1RZUEVfT1BdID0gVHlwZU9wZXJhdGlvbi5JTlRFUlNFQ1RJT047XG5cdFx0cmV0dXJuIHVuaW9uIGFzIFNjaGVtYTxhbnk+O1xuXHR9LFxufTtcblxuY29uc3QgbXlTY2hlbWEgPSB0Lm9iamVjdCh7XG5cdHZhbHVlOiB0LnVuaW9uKHQuc3RyaW5nLCB0Lm51bWJlciwgdC5ib29sZWFuKSxcblx0cmVjb3JkOiB0LnJlY29yZCh0LnN0cmluZywgdC51bmtub3duKSxcbn0pO1xuXG50eXBlIFRlc3QgPSBTY2hlbWFUeXBlPHR5cGVvZiBteVNjaGVtYT47XG4iXSwibmFtZXMiOlsiU1lNX1RZUEVfSUQiLCJTeW1ib2wiLCJTWU1fS0VZX1NDSEVNQSIsIlNZTV9WQUxVRV9TQ0hFTUEiLCJTWU1fVFlQRV9PUCIsIlNZTV9BUlJBWSIsIlNZTV9FWEFDVF9WQUxVRSIsInQiLCJzdHJpbmciLCJudW1iZXIiLCJib29sZWFuIiwiYmlnaW50IiwidW5rbm93biIsInVuZGVmaW5lZCIsImV4YWN0IiwibnVsbCIsIm9iamVjdCIsInByb3BlcnRpZXMiLCJyZWNvcmQiLCJrZXlzIiwidmFsdWVzIiwidmFsdWUiLCJvcHRpb25hbCIsInNjaGVtYSIsInVuaW9uIiwibnVsbGFibGUiLCJhcnJheSIsIml0ZW1zIiwiaW50ZXJzZWN0aW9uIiwibXlTY2hlbWEiXSwibWFwcGluZ3MiOiI7O0FBZUEsTUFBTUEsY0FBY0MsT0FBTztBQUMzQixNQUFNQyxpQkFBaUJELE9BQU87QUFDOUIsTUFBTUUsbUJBQW1CRixPQUFPO0FBQ2hDLE1BQU1HLGNBQWNILE9BQU87QUFDM0IsTUFBTUksWUFBWUosT0FBTztBQUN6QixNQUFNSyxrQkFBa0JMLE9BQU87QUFxQy9CLE1BQU1NLElBQUk7SUFDVEMsUUFBUTtRQUFFLENBQUNSLFlBQVk7SUFBZ0I7SUFDdkNTLFFBQVE7UUFBRSxDQUFDVCxZQUFZO0lBQWdCO0lBQ3ZDVSxTQUFTO1FBQUUsQ0FBQ1YsWUFBWTtJQUFpQjtJQUN6Q1csUUFBUTtRQUFFLENBQUNYLFlBQVk7SUFBZ0I7SUFDdkNZLFNBQVM7UUFBRSxDQUFDWixZQUFZO0lBQWlCO0lBRXpDLElBQUlhLGFBQVk7UUFDZixPQUFPTixFQUFFTyxLQUFLLENBQUNEO0lBQ2hCO0lBRUEsSUFBSUUsUUFBTztRQUNWLE9BQU9SLEVBQUVPLEtBQUssQ0FBQztJQUNoQjtJQUVBRSxRQUNDQyxVQUFhO1FBRWIsT0FBTztZQUNOLEdBQUdBLFVBQVU7WUFDYixDQUFDakIsWUFBWTtRQUNkO0lBQ0Q7SUFFQWtCLFFBQ0NDLElBQWUsRUFDZkMsTUFBaUI7UUFFakIsT0FBTztZQUNOLENBQUNwQixZQUFZO1lBQ2IsQ0FBQ0UsZUFBZSxFQUFFaUI7WUFDbEIsQ0FBQ2hCLGlCQUFpQixFQUFFaUI7UUFDckI7SUFDRDtJQUVBTixPQUFTTyxLQUFRO1FBQ2hCLE9BQU87WUFDTixDQUFDckIsWUFBWTtZQUNiLENBQUNNLGdCQUFnQixFQUFFZTtRQUNwQjtJQUNEO0lBRUFDLFVBQVlDLE1BQWlCO1FBQzVCLE9BQU9oQixFQUFFaUIsS0FBSyxDQUFDRCxRQUFRaEIsRUFBRU0sU0FBUztJQUNuQztJQUVBWSxVQUFZRixNQUFpQjtRQUM1QixPQUFPaEIsRUFBRWlCLEtBQUssQ0FBQ0QsUUFBUWhCLEVBQUVRLElBQUk7SUFDOUI7SUFFQVcsT0FBU0gsTUFBaUI7UUFDekIsT0FBTztZQUFFLEdBQUdBLE1BQU07WUFBRSxDQUFDbEIsVUFBVSxFQUFFO1FBQUs7SUFDdkM7SUFFQW1CLE9BQ0MsR0FBR0csS0FBUTtRQUVYLE1BQU1ILFFBQWdDO2VBQ2xDRztTQUNIO1FBQ0RILEtBQUssQ0FBQ3BCLFlBQVk7UUFDbEIsT0FBT29CO0lBQ1I7SUFFQUksY0FDQyxHQUFHRCxLQUFRO1FBRVgsTUFBTUgsUUFBZ0M7ZUFDbENHO1NBQ0g7UUFDREgsS0FBSyxDQUFDcEIsWUFBWTtRQUNsQixPQUFPb0I7SUFDUjtBQUNEO0FBRUEsTUFBTUssV0FBV3RCLEVBQUVTLE1BQU0sQ0FBQztJQUN6QkssT0FBT2QsRUFBRWlCLEtBQUssQ0FBQ2pCLEVBQUVDLE1BQU0sRUFBRUQsRUFBRUUsTUFBTSxFQUFFRixFQUFFRyxPQUFPO0lBQzVDUSxRQUFRWCxFQUFFVyxNQUFNLENBQUNYLEVBQUVDLE1BQU0sRUFBRUQsRUFBRUssT0FBTztBQUNyQyJ9
